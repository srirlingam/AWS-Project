name: Build and Deploy Nginx

on:
  workflow_dispatch:
    inputs:
      instance_id:
        description: "EC2 instance ID"
        required: true
        default: "i-0eb7ebb3cbedf73cf"
      ecr_repository:
        description: "ECR repository name"
        required: true
        default: "nginx-repo"
      aws_region:
        description: "AWS Region"
        required: true
        default: "us-east-1"
      aws_account_id:
        description: "AWS Account ID"
        required: true
        default: "183295438329"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v4 
      - name: Build and push Docker image
        env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: ${{ github.event.inputs.ecr_repository }}
        run: |
          docker build -t $REGISTRY/${{ github.event.inputs.ecr_repository }} .
          docker tag $REGISTRY/${{ github.event.inputs.ecr_repository }}:latest $REGISTRY/${{ github.event.inputs.ecr_repository }}:latest
          docker push $REGISTRY/${{ github.event.inputs.ecr_repository }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Decode PEM file
        run: echo "${{ secrets.EC2_PEM_FILE_BASE64 }}" | base64 --decode > ec2-key.pem

      - name: Set permissions for the PEM file
        run: chmod 400 ec2-key.pem

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ github.event.inputs.aws_region }}
          ECR_REPOSITORY: ${{ github.event.inputs.ecr_repository }}
          EC2_INSTANCE_ID: ${{ github.event.inputs.instance_id }}
          AWS_ACCOUNT_ID: ${{ github.event.inputs.aws_account_id }}
        run: |
          # Get the public IP of the EC2 instance
          EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          # Connect to EC2 and install Docker if needed
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@$EC2_PUBLIC_IP \
            AWS_REGION="${{ github.event.inputs.aws_region }}" \
            AWS_ACCOUNT_ID="${{ github.event.inputs.aws_account_id }}" \
            bash -s << 'EOF'
            # Install Docker if it's not installed
            if ! command -v docker &> /dev/null
            then
                sudo dnf update -y
                sudo dnf install -y docker
                sudo systemctl start docker
                sudo usermod -aG docker ec2-user
                sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi

            # Log in to ECR
            if [[ -z "$AWS_REGION" || -z "$AWS_ACCOUNT_ID" ]]; then
                echo "AWS_REGION or AWS_ACCOUNT_ID is not set. Exiting."
                exit 1
            fi

            # Ensure that the AWS CLI is configured
            if ! command -v aws &> /dev/null; then
                echo "AWS CLI is not installed. Exiting."
                exit 1
            fi

            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

            # Pull the latest Docker image
            IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"
            if [[ -z "$ECR_REPOSITORY" ]]; then
                echo "ECR_REPOSITORY is not set. Exiting."
                exit 1
            fi

            docker pull "$IMAGE_URI"

            # Run the container (replace the port and options as needed)
            docker run -d -p 80:80 --name nginx-container "$IMAGE_URI"
            EOF

